name: 'Sign and Notarize'
description: 'Sign and Notarize your macOS and Windows applications'
inputs:
  input-path:
    description: 'Path to the input file or directory'
    required: true
  macos-certificate:
    description: 'macOS certificate'
    required: false
  macos-certificate-id:
    description: 'macOS certificate ID'
    required: false
  macos-certificate-password:
    description: 'macOS certificate password'
    required: false
  macos-notarization-team:
    description: 'macOS notarization team id'
    required: false
  macos-notarization-user:
    description: 'macOS notarization user'
    required: false
  macos-notarization-password:
    description: 'macOS notarization password'
    required: false
  windows-certificate:
    description: 'Windows certificate'
    required: false
  windows-certificate-password:
    description: 'Windows certificate password'
    required: false

runs:
  using: "composite"
  steps:
    - name: Set variables
      id: vars
      run: |
        echo '${{ inputs.input-path }}'
        echo "macos-sign=${{ runner.os == 'macOS' && inputs.macos-certificate != '' && inputs.macos-certificate-id != '' && inputs.macos-certificate-password != '' }}" >> $GITHUB_OUTPUT
        echo "macos-notarize=${{ runner.os == 'macOS' && inputs.macos-notarization-team != '' && inputs.macos-notarization-user != '' && inputs.macos-notarization-password != '' }}" >> $GITHUB_OUTPUT
        echo "windows-sign=${{ runner.os == 'Windows' && inputs.windows-certificate != '' && inputs.windows-certificate-password != '' }}" >> $GITHUB_OUTPUT
      shell: bash

    # Windows
    - name: Set CodeSign Certificate Windows
      shell: powershell
      if: ${{ steps.vars.outputs.windows-sign == 'true' }}
      run: |
        Set-Content win_cert.txt -Value '${{ inputs.windows-certificate }}'
        certutil -decode win_cert.txt win_cert.pfx
        # print the list of the files in the current directory
        Get-ChildItem

    - name: CodeSign Windows
      shell: bash
      if: ${{ steps.vars.outputs.windows-sign == 'true' }}
      run: |
        echo "Signing..."
        bash $GITHUB_ACTION_PATH/windows-sign.sh \
          --input_path='${{ inputs.input-path }}' \
          --cert_file=win_cert.pfx \
          --cert_pssw='${{ inputs.windows-certificate-password }}'

    - name: Delete Windows certificate
      shell: bash
      if: ${{ steps.vars.outputs.windows-sign == 'true' }}
      run: |
        rm win_cert.pfx
        rm win_cert.txt

    # MacOS
    - name: Set CodeSign Certificate macOS
      if: ${{ steps.vars.outputs.macos-sign == 'true' }}
      uses: apple-actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ inputs.macos-certificate }}
        p12-password: ${{ inputs.macos-certificate-password }}

    - name: CodeSign macOS
      shell: bash
      if: ${{ steps.vars.outputs.macos-sign == 'true' }}
      run: |
        echo "Signing..."
        bash $GITHUB_ACTION_PATH/macos-sign.sh \
          --input_path='${{ inputs.input-path }}' \
          --cert_id='${{ inputs.macos-certificate-id }}'

    - name: Notarize macOS
      shell: bash
      if: ${{ steps.vars.outputs.macos-notarize == 'true' }}
      run: |
        echo "Notarizing..."
        bash $GITHUB_ACTION_PATH/macos-notarize.sh \
          --input_path='${{ inputs.input-path }}' \
          --notarization_team='${{ inputs.macos-notarization-team }}' \
          --notarization_user='${{ inputs.macos-notarization-user }}' \
          --notarization_pssw='${{ inputs.macos-notarization-password }}'

