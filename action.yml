name: 'Sign and Notarize'
description: 'Sign and Notarize your macOS and Windows applications'
inputs:
  input-path:
    description: 'Path to the input file or directory'
    required: true
  macos-certificate:
    description: 'macOS certificate'
    required: false
  macos-certificate-id:
    description: 'macOS certificate ID'
    required: false
  macos-certificate-password:
    description: 'macOS certificate password'
    required: false
  windows-certificate:
    description: 'Windows certificate'
    required: false
  windows-certificate-password:
    description: 'Windows certificate password'
    required: false

runs:
  using: "composite"
  steps:
    - name: Set variables
      id: vars
      run: |
        echo "macos-sign=${{ runner.os == 'macOS' && inputs.macos-certificate != '' && inputs.macos-certificate-id != '' && inputs.macos-certificate-password != '' }}" >> $GITHUB_OUTPUT
        echo "windows-sign=${{ runner.os == 'Windows' && inputs.windows-certificate != '' && inputs.windows-certificate-password != '' }}" >> $GITHUB_OUTPUT
      shell: bash

    # Windows
    - name: Set CodeSign Certificate Windows
      shell: powershell
      if: ${{ steps.vars.outputs.windows-sign == 'true' }}
      run: |
        Set-Content win_cert.txt -Value '${{ inputs.windows-certificate }}'
        certutil -decode win_cert.txt win_cert.pfx

    - name: CodeSign Windows
      shell: bash
      if: ${{ steps.vars.outputs.windows-sign == 'true' }}
      run: windows-sign.sh \
             --input-path='${{ inputs.input-path }}' \
             --cert_file=win_cert.pfx \
             --cert_pssw='${{ inputs.windows-certificate-password }}'

    - name: Delete Windows certificate
      shell: bash
      if: ${{ steps.vars.outputs.windows-sign == 'true' }}
      run: rm win_cert.pfx

    # MacOS
    - name: Set CodeSign Certificate macOS
      if: ${{ steps.vars.outputs.macos-sign == 'true' }}
      uses: apple-actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ inputs.macos-certificate }}
        p12-password: ${{ inputs.macos-certificate-password }}

    - name: CodeSign macOS
      shell: bash
      if: ${{ steps.vars.outputs.macos-sign == 'true' }}
      run: bash macos-sign.sh \
             --input-path='${{ inputs.input-path }}' \
             --cert_id='${{ inputs.macos-certificate-id }}'

